/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package FunkeTest;

import java.net.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.jsoup.parser.Parser;

import java.util.regex.Matcher;
import java.util.regex.Pattern;


import org.junit.Test;
import static org.junit.Assert.*;

public class FunkeTest {
    
    @Test public void testArticles() {
        List<String> sitemapURLs = Arrays.asList("https://www.abendblatt.de/sitemaps/news.xml", 
                "https://www.morgenpost.de/sitemaps/news.xml");
        
        for (String sitemap : sitemapURLs) {
            System.out.println("============================================================================");
            System.out.println("Checking Sitemap at " + sitemap);
            System.out.println("============================================================================");

            //Map<String, Document> articleDocMap = getArticlesFromXML(sitemap);
            List<String> articleURLs = getArticlesFromXML(sitemap);
            assertEquals(articleURLs.size(), 50);

            for (String url : articleURLs) {
                System.out.print("Checking " + url + " ... ");

                String html = getHTMLFromUrl(url);
                Document doc = Jsoup.parse(html);
                //p-Tag check is not working ccorrectly. The regular expression
                //is probably not correct.
                assertTrue("Number of opening and closing p-Tags does not match", checkMatchingPTags(html, doc));
                assertTrue("There should only be only one h1 tag at most.", checkAmountOfH1Tags(doc));

                // Jsoup already ignores img, div and table elements inside a
                // p-Tag and cleans it up. Did not find a good way to check this
                // with regex before parsing the html with Jsoup.
                assertTrue("There should be no div, img or table element inside a p-Tag", checkPTagContent(doc));
                System.out.println("");
            }
        }
    }

    /*
     * Checks if the given Document has a maximum of one h1-Tag.
     */
    private boolean checkAmountOfH1Tags(Document doc) {
        Elements h1Tags = doc.select("h1");

        System.out.print("H1-Tag Amount: " + h1Tags.size());
        if (h1Tags.size() <= 1) {
            System.out.print(" OK | ");
            return true;
        }
        
        System.out.print(" FAIL | ");
        return false;
    }

    /*
     * Checks if the given document has a matching number of opening & closing
     * p-Tags.
     */
    private boolean checkMatchingPTags(String html, Document doc) {
        Pattern pOpen = Pattern.compile("<p[^>]*?>(\\S+)");
        Matcher mOpen = pOpen.matcher(html);
        Pattern pClose = Pattern.compile("(\\S+)</p>");
        Matcher mClose = pClose.matcher(html);

        System.out.print("Matching p-Tags: ");
        int open = 0; 
        int close = 0;
        
        while (mOpen.find()) {
            open++;
            //System.out.println(mOpen.group());
        }
        
        System.out.print("Open: " + open + " ");

        while(mClose.find()) {
            close++;
            //System.out.println(mClose.group());
        }

        System.out.print("Close: " + close + " ");
        
        System.out.print("Parsed: " + doc.select("p").size() + " ");


        if (open == close) { 
            System.out.print(" OK | ");
            return true;
        }

        System.out.print(" FAIL | ");
        return false; 
    }
    
    /*private boolean checkPTagContent(String html) {
        Pattern p = Pattern.compile("<p(\\.*?)>(\\S+)</p>");
        Matcher m = p.matcher(html);

        System.out.print("p-Tag Content-Check: ");
        if (m.find()) {
                System.out.println(m.group(1));
                System.out.print(" OK | ");
                return true;
        }

        System.out.print(" FAIL | ");
        return false; 

    
    }*/

    /*
     * Checks all p-Tags of the given Document for img, div and table elements.
     */
    private boolean checkPTagContent(Document doc) {

        Elements pTagsImg = doc.select("p:has(img)");
        Elements pTagsDiv = doc.select("p:has(div)");
        Elements pTagsTable = doc.select("p:has(table)");
        
        int violations = pTagsDiv.size() + pTagsTable.size() + pTagsImg.size();
        System.out.print("P-Tags that have a div, img or table element: " + violations);

        if (violations == 0) {
            System.out.print(" OK |");
            return true;
        }

        System.out.print(" FAIL | ");
        return false;
    }


    /*
     * This function takes an url to an xml-Sitemap and extracts the urls to 50 newest
     * articles.
     */
    private List<String> getArticlesFromXML(String url) {
        
        //Map<String, Document> articleDocMap = new HashMap<>();
        List<String> urls = new ArrayList<>();

        try {
            Document document = Jsoup.parse(new URL(url).openStream(), "UTF-8", "", Parser.xmlParser());
            Elements articleURLs = document.select("loc");

            for (Element article : articleURLs.subList(0, 50)) {
                //System.out.println(article.text());
                //articleDocMap.put(article.text(), getDocFromURL(article.text()));
                urls.add(article.text());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return urls;
        //return articleDocMap; 
    }

    /*
     * This function parses the HTML of the given url via JSoup and returns the
     * parsed document.
     */
    private Document getDocFromURL(String url) {
        Document doc = null;

        try {
            doc = Jsoup.connect(url).get();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return doc;
    }


    /*
     * This function retrieves the raw HTML from an url and returns it as an
     * string.
     */
    private String getHTMLFromUrl(String urlstring) {
    
        StringBuilder htmlContent = new StringBuilder();

        try {
            URL url = new URL(urlstring);
            URLConnection urlConn = url.openConnection();

            BufferedReader buffReader = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));

            String line;

            while ((line = buffReader.readLine()) != null) {
                htmlContent.append(line + "\n");
            }

            buffReader.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

        return htmlContent.toString();
    }

}




